const express = require("express");
const { Room, RoomRequest, RoomAdmission } = require("../db/models");
const router = express.Router();

// POST /api/room-requests ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ
router.post("/", async (req, res) => {
  const userID = req.session.userID;
  // sendNotification - —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  // sendNotification - UI-—Ñ–ª–∞–≥ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å/—Å–Ω—è—Ç—å —á–µ–∫–±–æ–∫—Å "—É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞".
  const { roomID = 2, ownerID, sendNotification } = req.body;

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
    const room = await Room.findByPk(roomID);
    if (!room || room.owner_id !== ownerID) {
      res.status(403).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–Ω–∞—Ç—ã" });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å?
    const existingRequest = await RoomRequest.findOne({
      where: { userID, room_id: roomID, status: "pending" },
    });

    if (existingRequest) {
      return res.status(400).json({ message: "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω." });
    }

    // 3. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const createRequest = await RoomRequest.create({
      user_id: userID,
      room_id: roomID,
      owner_id: ownerID,
      // status - default "pending"
    });

    // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    if (sendNotification) {
      console.log(
        `üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É ${ownerID}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userID} –ø—Ä–æ—Å–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomID}`
      );
    }
    res
      .status(200)
      .json({ message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", request: createRequest });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥–º–∏–Ω–æ–º)
router.post("/approve", async (req, res) => {
  const { requestId } = req.body;
  try {
    const request = await RoomRequest.findByPk(requestId);
    if (!request) return res.status(404).json({ message: "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    // –°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç—É–ø
    await RoomAdmission.create({
      user_id: request.user_id,
      room_id: request.room_id,
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    request.status = "approved";
    await request.save();
    res.status(200).json({ message: "–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞" });
  }
});

module.exports = router;
