import React, { useContext, useMemo, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const UserContext = React.createContext();
export default function UserContextProvider({ children }) {
  const [userIDSession, setUserIDSession] = useState(null);
  const [userNameSession, setUserNameSession] = useState(null);

  const navigate = useNavigate();
  const [inputs, setInputs] = useState({});

  const signupInputsHandler = (e) => {
    setInputs((prevEvents) => ({
      ...prevEvents,
      [e.target.name]: e.target.value,
    }));
  };

  const signupSubmitHandler = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`/api/users/signup`, {
        login: inputs.login,
        password: inputs.password,
        name: inputs.name,
      });
      if (response.status === 200) {
        const data = response;
        setUserIDSession(data.userID);
        setUserNameSession(data.userName);
        navigate("/");
      }
    } catch (error) {
      console.log(error);
    }
  };

  const signinSubmitHandler = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`/api/users/signin`, {
        login: inputs.login,
        password: inputs.password,
      });
      if (response.status === 200) {
        const data = response;
        setUserIDSession(data.userID);
        setUserNameSession(data.userName);
        navigate("/");
      }
    } catch (error) {
      console.log(error);
    }
  };

  // ‚úÖ useMemo –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const contextValue = useMemo(
    () => ({
      inputs,
      userIDSession,
      userNameSession,
      signupInputsHandler,
      signupSubmitHandler,
      signinSubmitHandler,
    }),
    [inputs, userIDSession, userNameSession] // üìå –í useMemo, –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π [inputs, userIDSession, userNameSession] –æ–∑–Ω–∞—á–∞–µ—Ç:
    // ¬´–ü–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–π contextValue —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ inputs, userIDSession –∏–ª–∏ userNameSession –∏–∑–º–µ–Ω—è—Ç—Å—è.¬ª
    // inputs, userIDSession, userNameSession ‚Äî —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.
    // signupInputsHandler –∏ signupSubmitHandler ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä.
    // [inputs, userIDSession, userNameSession]
    // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑–º–µ–Ω–∏—Ç—Å—è, useMemo –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç contextValue.
  );
  return (
    <UserContext.Provider value={contextValue}>{children}</UserContext.Provider>
  );
}

export { UserContext };
