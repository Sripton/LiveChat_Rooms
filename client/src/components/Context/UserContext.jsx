import React, { useEffect, useMemo, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import {
  registersUser,
  loginUser,
  checkUserSession,
} from "../../redux/actions/userActions";
const UserContext = React.createContext();
export default function UserContextProvider({ children }) {
  // const [userIDSession, setUserIDSession] = useState(null);
  // const [userNameSession, setUserNameSession] = useState(null);
  const [inputs, setInputs] = useState({});
  const [loading, setLoading] = useState(true); // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
  const navigate = useNavigate();
  const dispatch = useDispatch();

  // üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  // useEffect(() => {
  //   const checkSession = async () => {
  //     try {
  //       const response = await axios.get(`/api/users/checkuser`);
  //       if (response.status === 200) {
  //         const { data } = response;
  //         setUserIDSession(data.userID);
  //         setUserNameSession(data.userName);
  //         navigate("/");
  //       }
  //     } catch (error) {
  //       console.log(error);
  //     } finally {
  //       setLoading(false);
  //     }
  //   };
  //   checkSession();
  // }, []);

  useEffect(() => {
    const verifySession = async () => {
      await dispatch(checkUserSession());
      setLoading(false);
    };
    verifySession();
  }, []);

  const { userID, userName } = useSelector((store) => store.user);

  const signupInputsHandler = (e) => {
    setInputs((prevEvents) => ({
      ...prevEvents,
      [e.target.name]: e.target.value,
    }));
  };

  const signupSubmitHandler = async (e) => {
    e.preventDefault();
    dispatch(registersUser(inputs, navigate));
    // try {
    //   const response = await axios.post(`/api/users/signup`, {
    //     login: inputs.login,
    //     password: inputs.password,
    //     name: inputs.name,
    //   });
    //   if (response.status === 200) {
    //     const { data } = response;
    //     setUserIDSession(data.userID);
    //     setUserNameSession(data.userName);
    //     navigate("/");
    //   }
    // } catch (error) {
    //   console.log(error);
    // }
  };

  const signinSubmitHandler = async (e) => {
    e.preventDefault();
    dispatch(loginUser(inputs, navigate));
    // dispatch(loginUser(inputs, navigate));
    // try {
    //   const response = await axios.post(`/api/users/signin`, {
    //     login: inputs.login,
    //     password: inputs.password,
    //   });
    //   if (response.status === 200) {
    //     const { data } = response;
    //     setUserIDSession(data.userID);
    //     setUserNameSession(data.userName);
    //     navigate("/");
    //   }
    // } catch (error) {
    //   console.log(error);
    // }
  };

  // ‚úÖ useMemo –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const contextValue = useMemo(
    () => ({
      inputs,
      // userIDSession,
      // userNameSession,
      userID,
      userName,
      signupInputsHandler,
      signupSubmitHandler,
      signinSubmitHandler,
      loading,
    }),
    [inputs, userID, userName] // üìå –í useMemo, –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π [inputs, userIDSession, userNameSession] –æ–∑–Ω–∞—á–∞–µ—Ç:
    // ¬´–ü–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–π contextValue —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ inputs, userIDSession –∏–ª–∏ userNameSession –∏–∑–º–µ–Ω—è—Ç—Å—è.¬ª
    // inputs, userIDSession, userNameSession ‚Äî —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.
    // signupInputsHandler –∏ signupSubmitHandler ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä.
    // [inputs, userIDSession, userNameSession]
    // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑–º–µ–Ω–∏—Ç—Å—è, useMemo –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç contextValue.
  );
  return (
    <UserContext.Provider value={contextValue}>{children}</UserContext.Provider>
  );
}

export { UserContext };
